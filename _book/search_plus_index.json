{"./":{"url":"./","title":"零、简介","keywords":"","body":" 简介 GitBook 有网页版和本地版两种，网页版通过 https://www.gitbook.com 网址进行访问，本地版主要是基于 Node.js 环境进行开发。 本教程主要教大家 Gitbook 的本地版使用。 [!note] 目前虽然 Gitbook 的代码无人维护，但是好在代码是开源的，可以根据自己需求来更改。 关于作者 🎓 华东师范大学软件工程硕士 📡 信息系统项目管理工程师 👨‍💻 腾讯课堂|学浪|慕课大学认证老师 所有内容均由作者整理发布。因作者水平有限，如有错误，欢迎指正。 版权说明 本项目采用 MIT License 进行许可。未经授权，请勿用于商业用途！ "},"1环境准备.html":{"url":"1环境准备.html","title":"一、Node环境准备","keywords":"","body":"环境准备 配置 Node.js 环境 使用 Gitbook 需要配置 Node.js 环境，具体的安装步骤，可查看官方文档。 [!danger] 由于目前 Gitbook 项目已经停止维护，Node 过高可能出现不兼容问题。 目前，经笔者测试，Node 版本 10.23.0 以下版本可使用。 安装成功后，执行命令可查看 node 版本和 npm 版本。 # 查看node版本 node -v # 查看npm版本 npm -v 安装 Gitbook 使用下面命令，安装 gitbook 包。 npm install -g gitbook-cli 初始化项目 Gitbook 初始化 创建一个文件夹，并进入到该文件夹中，执行下面命令，初始化 gitbook 项目。 gitbook init 执行结果 info: create SUMMARY.md info: initialization is finished 可以看到创建了 SUMMARY.md 文档，这是电子书的目录文档。 然后创建一个 REAMDE.md 文档，用来对这个项目进行介绍。 npm 初始化 执行下面命令，初始化为 npm 项目。 npm init 命令会提示输入项目信息，可默认不填写，直接回车。 最后，会显示配置信息，输入yes回车即可初始化完毕。 初始化成功后，系统会自动在当前目录创建package.json文件，这是 npm 项目的配置文件。 章节配置 GitBook 使用文件 SUMMARY.md 来定义书本的章节和子章节的结构。文件 SUMMARY.md 被用来生成书本内容的预览表。 SUMMARY.md 的格式是一个简单的链接列表，链接的名字是章节的名字，链接的指向是章节文件的路径。 子章节被简单的定义为一个内嵌于父章节的列表。 # 概要 - [章节一](chapter1.md) - [章节二](chapter2.md) - [章节三](chapter3.md) # 概要 - [第一章](part1/README.md) - [1.1 第一节](part1/writing.md) - [1.2 第二节](part1/gitbook.md) - [第二章](part2/README.md) - [2.1 第一节](part2/feedback_please.md) - [2.2 第二节](part2/better_tools.md) 启动项目 在package.json文件的scripts中配置如下的脚本命令： \"scripts\": { \"serve\": \"gitbook serve\", \"build\": \"gitbook build\" } 分别是 gitbook 在本地启动的命令，和 gitbook 打包成 HTML 静态文件的命令。 对于本地演示，我们可以直接通过下面命令启动。 npm run serve 这条命令其实就是执行了package.json文件的scripts中的serve脚本，即gitbook serve。 启动成功后，就可以在浏览器输入http://localhost:4000/，如图所示。 忽略文件 任何在文件夹下的文件，在最后生成电子书时都会被拷贝到输出目录中，如果想要忽略某些文件，和 Git 一样， Gitbook 会依次读取 .gitignore, .bookignore 和 .ignore 文件来将一些文件和目录排除。 配置文件 Gitbook 在编译书籍的时候会读取书籍源码顶层目录中的 book.js 或者 book.json，这里以 book.json 为例，参考 gitbook 文档 可以知道，book.json 常用的配置如下。 { // 书籍信息 \"title\": \"书名\", \"description\": \"描述\", \"isbn\": \"图书编号\", \"author\": \"作者\", \"lang\": \"zh-cn\", // 插件列表 \"plugins\": [], // 插件全局配置 \"pluginsConfig\": { \"fontSettings\": { \"theme\": \"sepia\", \"night\" or \"white\", \"family\": \"serif\" or \"sans\", \"size\": 1 to 4 } }, // 模板变量 \"variables\": { // 自定义 } } 当然，习惯用book.js的同学也可以，book.js只需要将 JSON 数据转为 JS 对象并导出即可，示例如下。 module.exports = { // 书籍信息 title: '书名', description: '描述', isbn: '图书编号', author: '作者', lang: 'zh-cn', // 插件列表 plugins: [], // 插件全局配置 pluginsConfig: {}, // 模板变量 variables: { // 自定义 }, }; 安装编辑器 Gitbook 编写可以用任何文本编辑器。在这里，我强烈安利 Typora 编辑器。Typora 编辑器是非常非常非常好用的 Markdown 文件编辑器，直接进Typora 官网下载对应平台的版本就可以了。当然，习惯用 Visual Studio 或者其他文本编辑工具的童鞋也可以根据自己的习惯自行选择。 "},"2语法介绍.html":{"url":"2语法介绍.html","title":"二、Markdown语法介绍","keywords":"","body":"Markdown语法介绍 GitBook 默认使用 Markdown 语法。Markdown 是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与 HTML 混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown 被大量使用，如 Github、Wikipedia 等网站，如各大博客平台：WordPress、Drupal、简书等。 千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十 个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。 就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版， 达到「心中无尘，码字入神」的境界。 标题 要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 () (例如：### 三级标题)。 Markdown 语法 HTML 预览效果 # 标题等级 1 标题等级 1 标题等级 1 ## 标题等级 2 标题等级 2 标题等级 2 ### 标题等级 3 标题等级 3 标题等级 3 #### 标题等级 4 标题等级 4 标题等级 4 ##### 标题等级 5 标题等级 5 标题等级 5 ###### 标题等级 6 标题等级 6 标题等级 6 段落 要创建段落，请使用空白行将一行或多行文本进行分隔。 Markdown 语法 HTML 预览效果 这是第一段。这是第一段。这是第一段。这是第一段。这是第二段。这是第二段。这是第二段。这是第二段。 这是第一段。这是第一段。这是第一段。这是第一段。这是第二段。这是第二段。这是第二段。这是第二段。 这是第一段。这是第一段。这是第一段。这是第一段。这是第二段。这是第二段。这是第二段。这是第二段。 强调 粗体 要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。 Markdown 语法 HTML 预览效果 后面要**加粗**。 后面要加粗。 后面要加粗。 斜体 要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。 Markdown 语法 HTML 预览效果 后面要*斜体*。 后面要斜体。 后面要斜体。 粗斜体 要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。 Markdown 语法 HTML 预览效果 后面要***粗斜体***。 后面要粗斜体。 后面要粗斜体。 引用 要创建块引用，请在段落前添加一个 > 符号。 > 段落段落段落 渲染效果如下所示： 段落段落段落 分段引用 块引用可以包含多个段落。为段落之间的空白行添加一个 > 符号。 > 段落段落段落111 > > 段落段落段落222 渲染效果如下所示： 段落段落段落 111 段落段落段落 222 嵌套引用 块引用可以嵌套。在要嵌套的段落前添加一个 >> 符号。 > 段落段落段落111 > >> 嵌套的段落 渲染效果如下所示： 段落段落段落 111 嵌套的段落 列表 可以将多个条目组织成有序或无序列表。 有序列表 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。 Markdown 语法 HTML 预览效果 1. First item2. Second item3. Third item4. Fourth item First itemSecond itemThird itemFourth item 1. First item2. Second item3. Third item4. Fourth item 1. First item1. Second item1. Third item1. Fourth item First itemSecond itemThird itemFourth item 1. First item2. Second item3. Third item4. Fourth item 无序列表 要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。 Markdown 语法 HTML 预览效果 - First item- Second item- Third item- Fourth item First itemSecond itemThird itemFourth item First itemSecond itemThird itemFourth item 表格 表格也很简单，就是这种方式。 | 列 1 | 列 2 | | ---- | ---- | | a | b | 上面的表格渲染后是这样的： 列 1 列 2 a b 表格默认是左对齐，我们还可以设置居中对齐或者右对齐。 | 列 1 | 列 2 | | :--: | :--: | | a | b | 这种方式是居中对齐，渲染效果是这样的： 列 1 列 2 a b | 列 1 | 列 2 | | ---: | ---: | | a | b | 这种方式是右对齐，渲染方式是这样的。 列 1 列 2 a b 代码 要将单词或短语表示为代码，请将其包裹在反引号 (```) 中。 Markdown 语法 HTML 预览效果 At the command prompt, type `nano`. At the command prompt, type nano. At the command prompt, type nano. 分隔线 要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。 *** --- _________________ 以上三个分隔线的渲染效果看起来都一样。 超链接 链接文本放在中括号内，链接地址放在后面的括号中，链接 title 可选。 超链接 Markdown 语法代码：[超链接显示名](超链接地址 \"超链接title\") 对应的 HTML 代码：超链接显示名 这是一个链接 [Markdown语法](https://markdown.com.cn)。 渲染效果如下： 这是一个链接 Markdown 语法。 图片 要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 插入图片 Markdown 语法代码：![图片alt](图片链接 \"图片title\")。 对应的 HTML 代码： ![图片标题](assets/avatar.png \"图片描述\") 渲染效果如下： 转义字符 要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 (\\) 。 \\* 星号不是列表，会显示出来。 渲染效果如下： * 星号不是列表，会显示出来。 普通字符转义 以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。 Character Name \\ backslash ` backtick * asterisk _ underscore { } curly braces [ ] brackets ( ) parentheses # pound sign + plus sign - minus sign (hyphen) . dot ! exclamation mark 特殊字符转义 在 HTML 文件中，有两个字符需要特殊处理： 和 & 。 符号用于起始标签，& 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 和 &。 & 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&T」 ，你必须要写成「AT&T」 ，还得转换网址内的 & 符号，如果你要链接到： http://images.google.com/images?num=30&q=larry+bird 你必须要把网址转成： http://images.google.com/images?num=30&amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。 Markdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用 & 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 &。所以你如果要在文件中插入一个著作权的符号，你可以这样写： &copy; Markdown 将不会对这段文字做修改，但是如果你这样写： AT&T Markdown 就会将它转为： AT&amp;T 类似的状况也会发生在 符号上，因为 Markdown 支持行内 HTML ，如果你使用 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写： 4 Markdown 将会把它转换为： 4 &lt; 5 需要特别注意的是，在 Markdown 的块级元素和内联元素中， 和 & 两个符号都会被自动转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML。（在 HTML 语法中，你要手动把所有的 和 & 都转换为 HTML 实体。） 内嵌 HTML 标签 对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。 比如，我们添加这样一个 HTML 标签。 Hello World 渲染的效果如下： Hello World "},"3插件运用.html":{"url":"3插件运用.html","title":"三、Gitbook插件运用","keywords":"","body":"插件运用 Gitbook 最灵活的地方就是有很多插件可以使用，当然如果对插件不满意，也可以自己写插件。所有插件的命名都是以gitbook-plugin-xxx的形式。下面，我们就介绍一些常用的插件。 使用插件前，现在当前项目的根目录中创建一个book.js文件，这是 Gitbook 的配置文件，文件内容可以根据自己来定制，内容格式如下。 // book.js module.exports = { title: 'Gitbook电子书', author: '松露老师', lang: 'zh-cn', description: 'Gitbook电子书示例项目', }; [!note] 想要了解每个插件的具体使用，可以去对应的插件官方文档中查看。 搜索插件 在命令行输入下面命令安装搜索插件。 npm install gitbook-plugin-search-pro 安装成功后，在book.js中添加插件的配置。 { plugins: ['search-pro']; } 代码框插件 在命令行输入下面命令安装代码插件。 npm install gitbook-plugin-code 安装成功后，在book.js中添加插件的配置。 { plugins: ['code']; } 自定义主题插件 在命令行输入下面命令安装自定义主题插件。 npm install gitbook-plugin-theme-主题名 安装成功后，在book.js中添加插件的配置。 { plugins: [\"theme-主题名\"] } [!note] Gitbook 的主题插件都是以gitbook-plugin-theme-xxx形式命名的。 菜单折叠插件 在命令行输入下面命令安装菜单栏折叠插件。 npm install gitbook-plugin-expandable-chapters 安装成功后，在book.js中添加插件的配置。 { plugins: ['expandable-chapters']; } 返回顶部插件 在命令行输入下面命令安装返回顶部插件。 npm install gitbook-plugin-back-to-top-button 安装成功后，在book.js中添加插件的配置。 { plugins: ['back-to-top-button']; } 引用插件 在命令行输入下面命令安装引用插件。 npm install gitbook-plugin-flexible-alerts 安装成功后，在book.js中添加插件的配置。 { plugins: ['flexible-alerts']; pluginsConfig: { \"flexible-alerts\": { style: \"flat\" // callout 或 flat } } } 关于引用插件的使用，可以查看官方文档，最终的效果如下。 最终效果 下面我们来看看我的运行效果图，比刚开始美观多了。 [!tip] 更多插件可以从 https://plugins.gitbook.com/ 获取。 "},"4服务部署.html":{"url":"4服务部署.html","title":"四、Nginx服务部署","keywords":"","body":"服务部署 构建项目 使用gitbook build构建项目，成功后即可在_book文件夹中生成对应的静态资源。 Pages 服务 很过 Git 服务提供商都有 Pages 服务，比如 Github Pages。由于 Github 的不稳定性，在国内访问经常出现问题，所以我们这边使用 Gitee Pages 服务。 将项目代码上传至 Gitee 的仓库，然后选择服务-Gitee Pages菜单。 进入菜单页后，选择需要部署的分支和目录，然后点击更新。更新成功后，即可通过 Gitee Pages 服务提供的地址访问。 安装 Nginx 对于想部署在自己服务器的同学，也可以通过 Nginx 做静态资源转发即可。Nginx 是轻量级 Web 服务器 ，它不仅是一个高性能的 HTTP 和反向代理服务器，同时也是一个 IMAP/POP3/SMTP 代理服务器。首先，在服务器上安装 Nginx 服务。不同服务器的安装方法也不同。 macOS系统 # 安装 brew install nginx # 启动 nginx # 停止 nginx -s stop # 重启 nginx -s reload # 查看版本 nginx -v # 测试 访问http://localhost:8080/ Linux系统 # nginx 添加到 yum 源 sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm # 安装 sudo yum install -y nginx # 启动 sudo systemctl start nginx.service # 设置开机自启动 sudo systemctl enable nginx.service Windows系统 到 Nginx 官网 上下载相应的安装包。 解压压缩文件，将解压后的文件放到合适的目录下，我的解压文件放在了 D 盘根目录下，如下图所示。 Nginx 目录所在的路径中不要有中文字符，也不建议有空格。 启动 Nginx。使用 CMD 命令 start 命令启动 nginx。 # 进入Nginx的安装目录 d: && cd nginx-1.8.1 # start命令启动 nginx.exe 可执行文件 start nginx 测试。访问http://localhost，即可看到 Nginx 欢迎页。（如果启动启动失败，可能是 IIS 占用了 80 端口。去掉 IIS 监听的 80 端口即可。） 配置转发 Nginx 安装成功后，找到安装位置，Linux 服务器一般在/etc/nginx/目录下。 找到后，我们进入/etc/nginx/conf.d/文件夹，然后新建一个demo.conf文件，用来配置这个项目的 Nginx 配置，文件内容如下： server { listen 8065; server_name 你的服务器IP; location / { charset utf-8; root /electronic-book-demo/build/; index index.html index.htm; } } server { listen 80; server_name demo.域名.com; location / { charset utf-8; root /electronic-book-demo/build/; index index.html index.htm; } } 配置成功后，执行nginx -s reload，重启服务。 我们在浏览器即可通过配置的服务地址来查看了。 "},"5生成电子书.html":{"url":"5生成电子书.html","title":"五、生成电子书","keywords":"","body":"生成电子书 gitbook官网不支持pdf、mobi格式的文件导出，但是gitbook-cli仍然可以。 安装依赖包 首先，需要安装svgexport包，在命令行执行如下命令： npm install svgexport -g 安装Calibre GitBook 生成 mobi 格式电子书依赖 Calibre 的 ebook-convert命令，因此需要先安装。 Windows 64位版：官方下载 Windows 32位版：官方下载 Windows 通用便携版：官方下载 Mac OS X 版：官方下载 Linux 安装：官方说明 安装成功以后，把 ebook-convert命令配置到电脑环境变量中。 macOS系统 把calibre的ebook-convert命令软连接到命令行执行目录下： sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin Windows系统 配置环境变量到PATH中： XXXXXXXXXXXXXX 导出电子书 执行命令，导出mobi格式电子书。 gitbook mobi "}}